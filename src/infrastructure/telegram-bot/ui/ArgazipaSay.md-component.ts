import { Effect } from "effect";

import { MD } from "./Markdown.js";

import type { NonEmptyReadonlyArray } from "effect/ReadonlyArray";

const changeMap = new Map([
	["–∞", ["@", "Œ±"]],
	["–±", ["6"]],
	["–≤", ["Íûµ", "·∫û", "√ü"]],
	["–æ", ["0", "Œ∏"]],
	["e", ["Œµ"]],
	["–∑", ["3", "z"]],
	["—á", ["4"]],
	["—Ä", ["œÅ"]],
	["–ø", ["œÄ"]],
	["–ª", [" å", "„ÖÖ", "‰∫∫", "ê§Ç", "‚àß", "‚ãÄ", "‚ãè", "·àà", "‚ºä", "Œª"]],
	["–º", ["Œº"]],
	["—É", ["œÖ"]],
	["—Ñ", ["œÜ"]],
	["—Ö", ["œá"]],
	["—Ç", ["œÑ"]],
	["—Ç", ["œÑ"]],
]);

function randomReplace(str: string) {
	const arr = str.split("");

	return arr
		.map((char) => {
			const analogue = changeMap.get(char.toLowerCase());
			if (analogue === undefined) {
				return char;
			}

			return Math.random() > 0.75
				? analogue[Math.floor(Math.random() * analogue.length)] ?? char
				: char;
		})
		.join("");
}

const NBSP = "¬†";

export const ArgazipaEmotion = {
	INFO: "‚ÑπÔ∏è",
};

export const ArgazipaSayMdComponent = (props: {
	emotion: string;
	phrase: string;
	tips?: NonEmptyReadonlyArray<string>;
}) =>
	Effect.gen(function* (_) {
		return yield* _(
			MD.codeBlock(["ü§ñ", props.emotion].join(NBSP))(
				randomReplace(props.phrase) +
					(props.tips
						? [
								"\n---",
								...props.tips.map((tip) => "üí° " + randomReplace(tip)),
							].join("\n")
						: "")
			)
		);
	});
